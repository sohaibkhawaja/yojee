str(loc.raw)
# Check first few rows of data
head(loc.raw)
# Clean dataset, filter invalid records
loc.nan <- loc.raw[(is.na(loc.raw$lon)), ]
loc.nan
# Check cleaned dataset
loc.new <- loc.raw[(!is.na(loc.raw$lon)), ]
loc.new$lat <- as.numeric(loc.new$lat)
str(loc.new)
# Function to calculate distance (Euclidean Distance) in kilometers between two points.
# Reference : https://conservationecology.wordpress.com/2013/06/30/distance-between-two-points-in-r/
earth.dist <- function (long1, lat1, long2, lat2){
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)}
# Define Central Distribution Point location
loc.cdp <- data.frame(lat = 11.552931, lon = 104.933636)
loc.cdp
# Calculate distance from Central Distribution Point to each delivery location
loc.new$km <- earth.dist(loc.cdp$lon, loc.cdp$lat, loc.new$lon, loc.new$lat)
head(loc.new)
# Check last few records
tail(loc.new)
# Check summary of dataset
summary(loc.new)
# box and whisker plot for reviewing distribution
boxplot(loc.new, use.cols = TRUE, horizontal = TRUE)
# set options and libraries
library("TSP")
library("maps")
library("sp")
library("maptools")
data("USCA50")
setwd(".\\")
options(digits=9)
# Read source data from locations.csv file
loc.raw <- read.csv(file = "locations.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(loc.raw)
# Check first few rows of data
head(loc.raw)
# Clean dataset, filter invalid records
loc.nan <- loc.raw[(is.na(loc.raw$lon)), ]
loc.nan
# Check cleaned dataset
loc.new <- loc.raw[(!is.na(loc.raw$lon)), ]
loc.new$lat <- as.numeric(loc.new$lat)
str(loc.new)
# Function to calculate distance (Euclidean Distance) in kilometers between two points.
# Reference : https://conservationecology.wordpress.com/2013/06/30/distance-between-two-points-in-r/
earth.dist <- function (long1, lat1, long2, lat2){
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)}
# Define Central Distribution Point location
loc.cdp <- data.frame(lat = 11.552931, lon = 104.933636)
loc.cdp
# Calculate distance from Central Distribution Point to each delivery location
loc.new$km <- earth.dist(loc.cdp$lon, loc.cdp$lat, loc.new$lon, loc.new$lat)
head(loc.new)
# Check last few records
tail(loc.new)
# Check summary of dataset
summary(loc.new)
# box and whisker plot for reviewing distribution
boxplot(loc.new[(loc.new$km < 5),], use.cols = TRUE, horizontal = TRUE)
# load US city data
USCA50
# Vehicle Stop coordinates
veh.stop <- loc.new
coordinates(veh.stop) <- c("lon","lat")
summary(veh.stop)
mypath <- getwd()
path("..\\")
setwd("..\\")
setwd("c:\\")
concorde_path("..\\Concorde")
setwd("..\\")
concorde_path("..\\Concorde")
concorde_path("C:\\Concorde")
mypath <- getwd()
concorde_path("C:\\Concorde")
methods <- c("nearest_insertion", "farthest_insertion", "cheapest_insertion", "arbitrary_insertion", "nn", "repetitive_nn", "two_opt")
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
tours[[1]]
dotchart(sort(c(sapply(tours, tour_length), optimal = 14497)), xlab = "tour length", xlim = c(0, 20000))
data("USCA312")
tsp <- insert_dummy(USCA312, label = "cut")
tsp
tours <- sapply(methods, FUN = function(m) solve_TSP(veh.stop, method = m),simplify = FALSE)
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA312, method = m),simplify = FALSE)
tours[[1]]
tours
veh.stop <- loc.new[1:2]
coordinates(veh.stop) <- c("lon","lat")
summary(veh.stop)
concorde_path("C:\\Concorde")
methods <- c("nn", "nearest_insertion", "farthest_insertion", "cheapest_insertion", "arbitrary_insertion", "repetitive_nn", "two_opt", "concorde", "linkern")
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
methods <- c("nn", "nearest_insertion", "farthest_insertion", "cheapest_insertion", "arbitrary_insertion", "repetitive_nn", "two_opt", "linkern")
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
methods <- c("nn", "nearest_insertion", "farthest_insertion", "cheapest_insertion", "arbitrary_insertion", "repetitive_nn", "two_opt")
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
tours[[1]]
tours$concorde <- solve_TSP(tsp, method = "concorde")
tours[[1]]
tours[[8]]
tours[[7]]
tours[[1]]
tour.concorde <- solve_TSP(USCA50, method = "concorde")
tour.concorde
data("USCA312")
tsp <- insert_dummy(USCA312, label = "cut")
tsp
concorde_path("C:\\Concorde")
tour.concorde <- solve_TSP(tsp, method = "concorde")
tour$concorde <- solve_TSP(tsp, method = "concorde")
tours$concorde <- solve_TSP(tsp, method = "concorde")
tour.concorde
tours$concorde <- solve_TSP(tsp, method = "concorde")
tours$concorde
tour.nn <- solve_TSP(tsp, method = "nn")
tour.nn
tours <- sapply(methods, FUN = function(m) solve_TSP(tsp, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 14497)), xlab = "tour length", xlim = c(0, 20000))
dotchart(sort(c(sapply(tours, tour_length), optimal = 14497)), xlab = "tour length", xlim = c(30000, 50000))
dotchart(sort(c(sapply(tours, tour_length), optimal = 3800)), xlab = "tour length", xlim = c(30000, 50000))
dotchart(sort(c(sapply(tours, tour_length), optimal = 38000)), xlab = "tour length", xlim = c(30000, 50000))
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 17500)), xlab = "tour length", xlim = c(1000, 5000))
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 17500)), xlab = "tour length", xlim = c(10000, 25000))
dotchart(sort(c(sapply(tours, tour_length), optimal = 15000)), xlab = "tour length", xlim = c(10000, 25000))
data("USCA312")
tsp <- insert_dummy(USCA312, label = "cut")
tsp
mypath <- getwd()
concorde_path("C:\\Concorde")
tours <- sapply(methods, FUN = function(m) solve_TSP(tsp, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 38000)), xlab = "tour length", xlim = c(30000, 50000))
dotchart(sort(c(sapply(tours, tour_length), optimal = 35000)), xlab = "tour length", xlim = c(30000, 50000))
summary(veh.stop)
mytour <- solve_TSP(tsp, method="two_opt")
mytour
concorde_path("C:\\Concorde")
tours <- sapply(methods, FUN = function(m) solve_TSP(tsp, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 35000)), xlab = "tour length", xlim = c(30000, 50000))
mytour <- solve_TSP(tsp, method="farthest_insertion")
mytour
head(labels(path))
path <- cut_tour(mytour, "cut")
head(labels(path))
tail(labels(path))
data("USCA312_map")
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
data("USCA312_map")
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+  plot(USCA312_basemap, add = TRUE, col = "gray")
data("USCA312_map")
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+  plot(USCA312_basemap, add = TRUE, col = "gray")
+  points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+  path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+  plot(path_line, add=TRUE, col = "black")
+  points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA312_basemap, add = TRUE, col = "gray")
+  plot(USCA312_basemap, add = TRUE, col = "gray")
data("USCA312_map")
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+  plot(USCA312_basemap, add = TRUE, col = "gray")
+  points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+  path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+  plot(path_line, add=TRUE, col = "black")
+  points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])),
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
data("USCA312_map")
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
plot_path <- function(path){
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
data("USCA312_map")
plot_path <- function(path){
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
data("USCA312_map")
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")}
plot_path(path)
data("USCA312_map")
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+ plot(USCA312_basemap, add = TRUE, col = "gray")
+ points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+ path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+ plot(path_line, add=TRUE, col = "black")
+ points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")}
plot_path(path)
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
+   plot(USCA312_basemap, add = TRUE, col = "gray")
+   points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
+   path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
+   plot(path_line, add=TRUE, col = "black")
+   points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA312_basemap, add = TRUE, col = "gray")
points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
plot(path_line, add=TRUE, col = "black")
points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
data("USCA312_map")
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA312_basemap, add = TRUE, col = "gray")
points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
plot(path_line, add=TRUE, col = "black")
points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
path <- cut_tour(mytour, "cut")
head(labels(path))
data("USCA312_map")
plot_path <- function(path){plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA312_basemap, add = TRUE, col = "gray")
points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
plot(path_line, add=TRUE, col = "black")
points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
plot_path <- function(path){
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA312_basemap, add = TRUE, col = "gray")
points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
plot(path_line, add=TRUE, col = "black")
points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
# set options and libraries
library("TSP")
library("maps")
library("sp")
library("maptools")
data("USCA50")
data("USCA312")
data("USCA312_map")
setwd(".\\")
options(digits=9)
# Read source data from locations.csv file
loc.raw <- read.csv(file = "locations.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(loc.raw)
# Check first few rows of data
head(loc.raw)
# Clean dataset, filter invalid records
loc.nan <- loc.raw[(is.na(loc.raw$lon)), ]
loc.nan
# Check cleaned dataset
loc.new <- loc.raw[(!is.na(loc.raw$lon)), ]
loc.new$lat <- as.numeric(loc.new$lat)
str(loc.new)
# Function to calculate distance (Euclidean Distance) in kilometers between two points.
# Reference : https://conservationecology.wordpress.com/2013/06/30/distance-between-two-points-in-r/
earth.dist <- function (long1, lat1, long2, lat2){
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)}
# Define Central Distribution Point location
loc.cdp <- data.frame(lat = 11.552931, lon = 104.933636)
loc.cdp
# Calculate distance from Central Distribution Point to each delivery location
loc.new$km <- earth.dist(loc.cdp$lon, loc.cdp$lat, loc.new$lon, loc.new$lat)
head(loc.new)
# Check last few records
tail(loc.new)
# Check summary of dataset
summary(loc.new)
# box and whisker plot for reviewing distribution
boxplot(loc.new[(loc.new$km < 5),], use.cols = TRUE, horizontal = TRUE)
# load US city data
USCA50
# Tour comparison for 50 US cities.
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
plot_path <- function(path){
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA312_basemap, add = TRUE, col = "gray")
points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
plot(path_line, add=TRUE, col = "black")
points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
path <- cut_tour(mytour, "cut")
mytour <- solve_TSP(tsp, method = "nearest_insertion")
tsp <- insert_dummy(USCA312, label = "cut")
tsp
concorde_path("C:\\Concorde")
tours <- sapply(methods, FUN = function(m) solve_TSP(tsp, method = m),simplify = FALSE)
methods <- c("nearest_insertion", "farthest_insertion", "cheapest_insertion", "arbitrary_insertion", "nn", "repetitive_nn", "two_opt")
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 15000)), xlab = "tour length", xlim = c(10000, 25000))
```{r}
data("USCA312")
tsp <- insert_dummy(USCA312, label = "cut")
tsp
concorde_path("C:\\Concorde")
tours <- sapply(methods, FUN = function(m) solve_TSP(tsp, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 35000)), xlab = "tour length", xlim = c(30000, 50000))
mytour <- solve_TSP(tsp, method = "two_opt")
mytour
path <- cut_tour(mytour, "cut")
head(labels(path))
tail(labels(path))
plot_path <- function(path){
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA312_basemap, add = TRUE, col = "gray")
points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
plot(path_line, add=TRUE, col = "black")
points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
# Vehicle Stop coordinates
veh.stop <- loc.new[1:2]
coordinates(veh.stop) <- c("lon","lat")
summary(veh.stop)
# set options and libraries
library("TSP")
library("maps")
library("sp")
library("maptools")
data("USCA50")
data("USCA312")
data("USCA312_map")
setwd(".\\")
options(digits=9)
# Read source data from locations.csv file
loc.raw <- read.csv(file = "locations.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(loc.raw)
# Check first few rows of data
head(loc.raw)
# Clean dataset, filter invalid records
loc.nan <- loc.raw[(is.na(loc.raw$lon)), ]
loc.nan
# Check cleaned dataset
loc.new <- loc.raw[(!is.na(loc.raw$lon)), ]
loc.new$lat <- as.numeric(loc.new$lat)
str(loc.new)
# Function to calculate distance (Euclidean Distance) in kilometers between two points.
# Reference : https://conservationecology.wordpress.com/2013/06/30/distance-between-two-points-in-r/
earth.dist <- function (long1, lat1, long2, lat2){
rad <- pi/180
a1 <- lat1 * rad
a2 <- long1 * rad
b1 <- lat2 * rad
b2 <- long2 * rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.145
d <- R * c
return(d)}
# Define Central Distribution Point location
loc.cdp <- data.frame(lat = 11.552931, lon = 104.933636)
loc.cdp
# Calculate distance from Central Distribution Point to each delivery location
loc.new$km <- earth.dist(loc.cdp$lon, loc.cdp$lat, loc.new$lon, loc.new$lat)
head(loc.new)
# Check last few records
tail(loc.new)
# Check summary of dataset
summary(loc.new)
# box and whisker plot for reviewing distribution
boxplot(loc.new[(loc.new$km < 5),], use.cols = TRUE, horizontal = TRUE)
# TSP solver methods
methods <- c("nearest_insertion", "farthest_insertion", "cheapest_insertion", "arbitrary_insertion", "nn", "repetitive_nn", "two_opt")
# Tour comparison for 50 US cities.
tours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 15000)), xlab = "tour length", xlim = c(10000, 25000))
data("USCA312")
tsp <- insert_dummy(USCA312, label = "cut")
tsp
concorde_path("C:\\Concorde")
# Tour comparison for 313 US cities.
tours <- sapply(methods, FUN = function(m) solve_TSP(tsp, method = m),simplify = FALSE)
tours
dotchart(sort(c(sapply(tours, tour_length), optimal = 35000)), xlab = "tour length", xlim = c(30000, 50000))
mytour <- solve_TSP(tsp, method = "two_opt")
mytour
path <- cut_tour(mytour, "cut")
head(labels(path))
tail(labels(path))
plot_path <- function(path){
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA312_basemap, add = TRUE, col = "gray")
points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID="1")))
plot(path_line, add=TRUE, col = "black")
points(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
# Vehicle Stop coordinates
veh.stop <- loc.new[1:2]
coordinates(veh.stop) <- c("lon","lat")
summary(veh.stop)
