{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Yojee - Case\"\noutput: html_notebook\n---\n\nCase 1:  A delivery company IParcel delivers packages to certain locations every day. Below is a sample set of the lat and lngs.\n•\t1 parcel per location for the sake of simplicity\n•\tThere are n number of delivery boys riding motorcycles available\n\nThe purpose of this problem is to come up with an efficient path for each of the 25 drivers from a central distribution point (11.552931,104.933636).\n\nThings we expect\n•\tCode on a git repo\n•\tEfficiency in running the problem\n•\tAny visualisation that you can think of\n•\tIdeas on how you plan to scale this if the number of locations increase (more warehouses and distribution points). Also how this can be translated to engineering infrastructure if need be.\n•\tProblem statement is purposefully at a very high level. If you have any new ideas we didn’t think of, would be a bonus.\n\n*Please also find the attached sample csv file.\n\n```{r}\n# set options and libraries\nlibrary(\"TSP\")\nlibrary(\"maps\")\nlibrary(\"sp\")\nlibrary(\"maptools\")\n\ndata(\"USCA50\")\ndata(\"USCA312\")\ndata(\"USCA312_map\")\n\nsetwd(\".\\\\\")\noptions(digits=9)\n\n```\n\n\n```{r}\n# Read source data from locations.csv file\nloc.raw <- read.csv(file = \"locations.csv\", header = TRUE, sep = \",\", stringsAsFactors = FALSE)\nstr(loc.raw)\n```\n\n```{r}\n# Check first few rows of data\nhead(loc.raw)\n```\n\n```{r}\n# Clean dataset, filter invalid records\nloc.nan <- loc.raw[(is.na(loc.raw$lon)), ]\nloc.nan\n```\n\n\n```{r}\n# Check cleaned dataset\nloc.new <- loc.raw[(!is.na(loc.raw$lon)), ]\nloc.new$lat <- as.numeric(loc.new$lat)\nstr(loc.new)\n\n```\n\n```{r}\n# Function to calculate distance (Euclidean Distance) in kilometers between two points.\n# Reference : https://conservationecology.wordpress.com/2013/06/30/distance-between-two-points-in-r/\n\nearth.dist <- function (long1, lat1, long2, lat2){\nrad <- pi/180\na1 <- lat1 * rad\na2 <- long1 * rad\nb1 <- lat2 * rad\nb2 <- long2 * rad\ndlon <- b2 - a2\ndlat <- b1 - a1\na <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2\nc <- 2 * atan2(sqrt(a), sqrt(1 - a))\nR <- 6378.145\nd <- R * c\nreturn(d)}\n```\n\n\n```{r}\n# Define Central Distribution Point location\n\nloc.cdp <- data.frame(lat = 11.552931, lon = 104.933636)\nloc.cdp\n```\n\n\n```{r}\n# Calculate distance from Central Distribution Point to each delivery location\n\nloc.new$km <- earth.dist(loc.cdp$lon, loc.cdp$lat, loc.new$lon, loc.new$lat)\nhead(loc.new)\n```\n\n\n```{r}\n# Check last few records\n\ntail(loc.new)\n```\n\n\n```{r}\n# Check summary of dataset\n\nsummary(loc.new)\n```\n\n```{r, fig.width=11}\n# box and whisker plot for reviewing distribution\n\nboxplot(loc.new[(loc.new$km < 5),], use.cols = TRUE, horizontal = TRUE)\n```\n\n```{r}\n# TSP solver methods\nmethods <- c(\"nearest_insertion\", \"farthest_insertion\", \"cheapest_insertion\", \"arbitrary_insertion\", \"nn\", \"repetitive_nn\", \"two_opt\")\n```\n\n```{r}\n# Tour comparison for 50 US cities.\ntours <- sapply(methods, FUN = function(m) solve_TSP(USCA50, method = m),simplify = FALSE)\ntours\n```\n\n```{r, fig.width=11}\ndotchart(sort(c(sapply(tours, tour_length), optimal = 15000)), xlab = \"tour length\", xlim = c(10000, 25000))\n```\n\n```{r}\ndata(\"USCA312\")\ntsp <- insert_dummy(USCA312, label = \"cut\")\ntsp\n\nconcorde_path(\"C:\\\\Concorde\")\n\n\n# Tour comparison for 313 US cities.\ntours <- sapply(methods, FUN = function(m) solve_TSP(tsp, method = m),simplify = FALSE)\ntours\n```\n\n```{r, fig.width=11}\ndotchart(sort(c(sapply(tours, tour_length), optimal = 35000)), xlab = \"tour length\", xlim = c(30000, 50000))\n```\n```{r}\nmytour <- solve_TSP(tsp, method = \"two_opt\")\nmytour\n```\n```{r}\npath <- cut_tour(mytour, \"cut\")\nhead(labels(path))\n```\n```{r}\ntail(labels(path))\n```\n\n```{r}\nplot_path <- function(path){\nplot(as(USCA312_coords, \"Spatial\"), axes = TRUE)\nplot(USCA312_basemap, add = TRUE, col = \"gray\")\npoints(USCA312_coords, pch = 3, cex = 0.4, col = \"red\")\npath_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID=\"1\")))\nplot(path_line, add=TRUE, col = \"black\")\npoints(USCA312_coords[c(head(path,1), tail(path,1)),], pch = 19, col = \"black\")\n}\n```\n\n```{r, fig.width=11}\nplot_path(path)\n```\n\n```{r}\n# Vehicle Stop coordinates\nveh.stop <- loc.new[1:2]\ncoordinates(veh.stop) <- c(\"lon\",\"lat\")\nsummary(veh.stop)\n\n```\n\n",
    "created" : 1506306291516.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3890818383",
    "id" : "3B735148",
    "lastKnownWriteTime" : 1506354782,
    "last_content_update" : 1506354782172,
    "path" : "C:/GitHub/yojee/yojee-solution.Rmd",
    "project_path" : "yojee-solution.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "last_setup_crc32" : "",
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}